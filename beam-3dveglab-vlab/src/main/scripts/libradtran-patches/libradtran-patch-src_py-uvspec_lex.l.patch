--- ./src_py/uvspec_lex.l.orig	2014-09-05 10:45:54.278090884 +0200
+++ ./src_py/uvspec_lex.l	2014-12-29 16:45:37.310560497 +0100
@@ -89,6 +89,10 @@
 int check_if_result_exists     (int *output_user, int n_output_user, int solver, int **valid_result, int quiet);
 int write_netCDF_output        (input_struct Input, output_struct *output);
 
+static int tokens_parse_one    (char *in, char *out, int max, char **saveptr);
+static char **tokens_parse     (char *yytext, int *count);
+static void tokens_free        (char **toks, int count);
+
 char *s, *t, *u;
 int ntokens;
 int mol_id;
@@ -143,7 +147,9 @@
 SPACE_SIGNED_FLOAT {SPACE}+{SIGNED_FLOAT}
 SIGNED_FLOATS {SPACE_SIGNED_FLOAT}+
 SIGNED_INTEGER {SIGN}?{INTEGER}
-WORD     [_\.\/A-Za-z][_\.\/A-Za-z0-9\-]*
+WORDX          [_\.\/\\A-Za-z][_\.\/\\A-Za-z0-9\-:]*
+WORDX_OR_SPACE {WORDX}|{SPACE}
+WORD           {WORDX}|(\"{WORDX_OR_SPACE}*\")
 DIM      [1,3][d,D]
 SPACE_PROFILETYPE {SPACE}+({DIM}|{WORD})
 SPACE_WORD {SPACE}+{WORD}
@@ -1854,7 +1860,7 @@
 
 
 <include>[ \t]*      /* eat the whitespace */
-<include>[^ \t\n]+   { /* got the include file name */
+<include>{WORD}   { /* got the include file name */
         if (include_stack_ptr >= MAX_INCLUDE_DEPTH) {
             fprintf (stderr, "Includes nested too deeply");
             exit (1);
@@ -1862,12 +1868,16 @@
 
         include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;
 
-        yyin = fopen(yytext, "r");
+        char *tfname;
+        tfname = yytext2string(yytext, 1, 1);
+        yyin = fopen(tfname, "r");
 
         if (!yyin) {
-            fprintf (stderr, "Error including %s\n", yytext);
+            fprintf (stderr, "Error including %s\n", tfname);
+            free(tfname);
             exit(1);
         }
+        free(tfname);
 
         yy_switch_to_buffer (yy_create_buffer (yyin, YY_BUF_SIZE));
 
@@ -10624,211 +10634,115 @@
 
 
 static float yytext2float(char* yytext, int which_token, int max_token) {
-  double dnumber=0;
-  char token[]=UVSPEC_TOKEN;
-  char *p=NULL, *s=NULL;
-  int count=0;
-  char *tmpstring=NULL;
-  
-  tmpstring = (char *) calloc (strlen(yytext)+1, sizeof (char));
-  strcpy (tmpstring, yytext);
-
-  p = strtok(tmpstring,token);
-  count = 1;
-  while ((p = strtok(NULL,token)) != NULL) {
-    count++;
-    if (count == which_token)
-      s = p;
-  }
-  
-  if ((count != which_token) && (count>max_token))
-    fprintf(stderr,"Wrong number of arguments on line %d\n", line_number+1);
-  
-  dnumber = atof(s);
-  free(tmpstring);
-  return (float) dnumber;
+  return (float) yytext2double(yytext, which_token, max_token);
 }
 
 
 static double yytext2double(char* yytext, int which_token, int max_token) {
-  double dnumber=0;
-  char token[]=UVSPEC_TOKEN;
-  char *p=NULL, *s=NULL;
-  int count=0;
-  char *tmpstring=NULL;
-  
-  tmpstring = (char *) calloc (strlen(yytext)+1, sizeof (char));
-  strcpy (tmpstring, yytext);
-  
-  p = strtok(tmpstring,token);
-  count = 1;
-  while ((p = strtok(NULL,token)) != NULL) {
-    count++;
-    if (count == which_token)
-      s = p;
-  }
-  
-  if ((count != which_token) && (count>max_token))
-    fprintf(stderr,"Wrong number of arguments on line %d\n", line_number+1);
-  
-  dnumber = atof(s);
+  double dnumber = 0;
+  char *tok;
 
-  free(tmpstring);
+  tok = yytext2string(yytext, which_token, max_token);
+  if (tok != NULL) {
+    dnumber = atof(tok);
+    free(tok);
+  }
   return dnumber;
 }
 
 
 static float* yytext2floats(char* yytext, int nary) {
-  int i=0;
-  char token[]=UVSPEC_TOKEN;
-  char *p=NULL;
-  char *tmpstring=NULL;
-  
-  /* Fill up ary */
-  float *ary = (float *) calloc (nary, sizeof(float));
-  
-  tmpstring = (char *) calloc (strlen(yytext)+1, sizeof (char));
-  strcpy (tmpstring, yytext);
-
-  p = strtok(tmpstring,token);
-  i = 0;
-
-  while ((p = strtok(NULL,token)) != NULL)
-    ary[i++] = atof(p);
-
-  free(tmpstring);
+  char **toks;
+  char **p;
+  int i, count;
+  float *ary = NULL;
+
+  toks = tokens_parse(yytext, &count);
+
+  if (nary < count) {
+    ary = (float *) calloc(nary, sizeof(float));
+    /* intentionally skipping first token */
+    for(i=0, p=toks+1; i < nary; i++, p++) {
+      ary[i] = (float) atof(*p);
+    }
+  } else {
+    fprintf(stderr, "yytext2floats: expected=%d actual=%d\n", nary, count);
+  }
+  if (count > 0) {tokens_free(toks, count);}
   return ary;
 }
 
 
 static int* yytext2integers(char* yytext, int nary) {
-  int i=0;
-  char token[]=UVSPEC_TOKEN;
-  char *p=NULL;
-  char *tmpstring=NULL;
-  
-  /* Fill up ary */
-  int *ary    = (int *) calloc (nary, sizeof(int));
-
-  tmpstring = (char *) calloc (strlen(yytext)+1, sizeof (char));
-  strcpy (tmpstring, yytext);
-
-  p = strtok(tmpstring,token);
-  i = 0;
-
-  while ((p = strtok(NULL,token)) != NULL)
-    ary[i++] = atoi(p);
-
-  free(tmpstring);
+  char **toks;
+  char **p;
+  int i, count;
+  int *ary = NULL;
+
+  toks = tokens_parse(yytext, &count);
+  if (nary < count) {
+    ary = (int *) calloc(nary, sizeof(int));
+    for(i=0, p=toks; i < nary; i++, p++) {
+      ary[i] = atoi(*p);
+    }
+  } else {
+    fprintf(stderr, "yytext2integers: expected=%d actual=%d\n", nary, count);
+  }
+  if (count > 0) {tokens_free(toks, count);}
   return ary;
 }
 
 
-static int yytext2ntokens(char* yytext) {
-  int nary=0;
-  char token[]=UVSPEC_TOKEN;
-  char *p=NULL;
-  char *tmpstring=NULL;
-  
-  tmpstring = (char *) calloc (strlen(yytext)+1, sizeof (char));
-  strcpy (tmpstring, yytext);
-
-  /* Get number of ary elements */
-  nary = 0;
-  p = strtok(tmpstring,token);
+static int yytext2ntokens(char *yytext) {
+  char **toks;
+  int count;
 
-  while ((p = strtok(NULL,token)) != NULL) 
-    nary++;
+  toks = tokens_parse(yytext, &count);
+  if (count > 0) {tokens_free(toks, count);}
 
-  free(tmpstring);
-  return nary;
+  /* 0 means there is 1 token */
+  return count-1;
 }
 
 
 static int yytext2int(char* yytext, int which_token, int max_token) {
-  int inumber=0;
-  char token[]=UVSPEC_TOKEN;
-  char *p=NULL, *s=NULL;
-  int count=0;
-  char *tmpstring=NULL;
-  
-  tmpstring = (char *) calloc (strlen(yytext)+1, sizeof (char));
-  strcpy (tmpstring, yytext);
+  int number = 0;
+  char *tok;
 
-  p = strtok(tmpstring,token);
-  count = 1;
-  while ((p = strtok(NULL,token)) != NULL) {
-    count++;
-    if (count == which_token)
-      s = p;
+  tok = yytext2string(yytext, which_token, max_token);
+  if (tok != NULL) {
+    number = atoi(tok);
+    free(tok);
   }
-
-  if ((count != which_token) && (count>max_token))
-    fprintf(stderr,"Wrong number of arguments on line %d\n", line_number+1);
-
-  inumber = atoi(s);
-
-  free(tmpstring);
-  return inumber;
+  return number;
 }
 
+static char *yytext2string(char *yytext, int which_token, int max_token) {
+  char **toks;
+  char *ret = NULL;
+  int count;
 
-static char* yytext2string(char* yytext, int which_token, int max_token) {
-  char token[]=UVSPEC_TOKEN;
-  char *p=NULL, *s=NULL, *string=NULL, *tmpstring=NULL;
-  int count=0;
-
-  tmpstring = (char *) calloc (strlen(yytext)+1, sizeof (char));
-  strcpy (tmpstring, yytext);
+  toks = tokens_parse(yytext, &count);
 
-  p = strtok(tmpstring,token);
-  count = 1;
-  if (which_token == 1) {
-    s = p;
+  if ((which_token > 0) && (which_token <= count)) {
+    ret = strdup(toks[which_token-1]);
+  } else {
+    fprintf(stderr, "yytext2string: expected=%d actual=%d\n", which_token, count);
+    fprintf(stderr, "yytext2string: <%s>\n", yytext);
+    exit(1);
   }
-  else { 
-    while ((p = strtok(NULL,token)) != NULL) {
-      count++;
-      if (count == which_token)
-        s = p;
-    }
-  }
-
-  if ((count != which_token) && (count > max_token))
-    fprintf(stderr,"Wrong number of arguments on line %d (yytext2string) \n", line_number+1);
-
-  string = (char *) calloc (strlen(s)+1, sizeof (char));
-  strcpy (string, s);
-
-  free(tmpstring);
-
-  return string;
+  if (count > 0) {tokens_free(toks, count);}
+  return ret;
 }
 
+static int yytextCstring(char *dest, char *yytext, int which_token, int max_token) {
+  char *tok;
 
-/* like yytext2string, but string is copied to a pre-allocated string dest */
-static int yytextCstring(char *dest, char* yytext, int which_token, int max_token) {
-  char token[]=UVSPEC_TOKEN;
-  char *p=NULL, *s=NULL, *tmpstring=NULL;
-  int count=0;
-
-  tmpstring = (char *) calloc (strlen(yytext)+1, sizeof (char));
-  strcpy (tmpstring, yytext);
-
-  p = strtok(tmpstring,token);
-  count = 1;
-  while ((p = strtok(NULL,token)) != NULL) {
-    count++;
-    if (count == which_token)
-      s = p;
+  tok = yytext2string(yytext, which_token, max_token);
+  if (tok != NULL) {
+    strcpy(dest, tok);
+    free(tok);
   }
-
-  if ((count != which_token) && (count>max_token))
-    fprintf(stderr,"Wrong number of arguments on line %d\n", line_number+1);
-
-  strcpy (dest, s);
-
-  free(tmpstring);
   return 0;
 }
 
@@ -10900,4 +10814,84 @@
   return umu;
 }
 
+static int tokens_parse_one(char *in, char *out, int max, char **saveptr) {
+
+  int len = 0;
+  int ret = 1;
+  enum {START, IN_QUOTED_TOKEN, IN_TOKEN, ACCEPT} state;
+  state = START;
+
+  /* ensure "out" will be null terminated */
+  memset(out, '\0', max);
+  if (in == NULL) { in = *saveptr; }
+  if (*in == '\0') { ret = 0; }
+  while ((state != ACCEPT) && (*in != '\0')) {
+    switch (*in) {
+      case '"':
+        switch (state) {
+          case START:
+            state = IN_QUOTED_TOKEN;
+            break;
+          case IN_QUOTED_TOKEN:
+          case IN_TOKEN:
+          case ACCEPT:
+            state = ACCEPT;
+            break;
+        }
+        break;
+      case ' ':
+        switch (state) {
+          case START:
+            break;
+          case IN_QUOTED_TOKEN:
+            if (len < max-1) { out[len] = *in; }
+            len++;
+            break;
+          case IN_TOKEN:
+          case ACCEPT:
+            state = ACCEPT;
+            break;
+        }
+        break;
+      case '\n':
+        state = ACCEPT;
+        break;
+      default:
+        if (state == START) { state = IN_TOKEN; }
+        if (len < max-1)    { out[len] = *in; }
+        len++;
+        break;
+    }
+    in++;
+  }
+  *saveptr = in;
+  return ret;
+}
+
+static char **tokens_parse(char *yytext, int *count) {
+  char buf[8192];
+  char *saveptr = NULL;
+  int ret;
+  int i = 0;
 
+  memset(buf, '\0', sizeof(buf));
+  char **toks = NULL;
+  ret = tokens_parse_one(yytext, buf, sizeof(buf), &saveptr);
+  while (ret != 0) {
+    i++;
+    toks = realloc(toks, i * sizeof(char *));
+    toks[i-1] = strdup(buf);
+    ret = tokens_parse_one(NULL, buf, sizeof(buf), &saveptr);
+  }
+  *count = i;
+  return toks;
+}
+
+static void tokens_free(char **toks, int count) {
+  char **p;
+  int i;
+  for(i=0, p=toks; i < count; i++, p++) {
+    if (*p != NULL) { free(*p); }
+  }
+  free(toks);
+}
